version: '3.6'
services:
  postgres:
    image: nhost/postgres:12-v0.0.6
    restart: always
    ports:
      - 5432:5432
    env_file: $BASE_PATH/services/postgres/.env.staging
    volumes:
      - db_data:/var/lib/postgresql/data

  hasura:
    image: hasura/graphql-engine:v2.2.1
    restart: always
    depends_on:
      - postgres
    ports:
      - 8080:8080
    env_file: $BASE_PATH/services/hasura/.env.staging

  hasura-backend-plus:
    image: $GITHUB_REGISTRY/nx-workspace-hasura-backend-plus:$IMAGE_TAG
    restart: always
    depends_on:
      - hasura
    ports:
      - '4000:4000'
    env_file: $BASE_PATH/services/hasura-backend-plus/.env.staging

  auto-migrations:
    image: $GITHUB_REGISTRY/nx-workspace-auto-migration:$IMAGE_TAG
    restart: always
    depends_on:
      - 'hasura-backend-plus'
    env_file: $BASE_PATH/services/hasura/.env.staging

  backend-main:
    image: $GITHUB_REGISTRY/nx-workspace-backend-main:$IMAGE_TAG
    restart: always
    ports:
      - '3333:3333'
    depends_on:
      - 'auto-migrations'
    env_file: $BASE_PATH/apps/backend/main/.env.staging

  fontend-main:
    image: $GITHUB_REGISTRY/nx-workspace-frontend-main:$IMAGE_TAG
    restart: always
    ports:
      - '3000:3000'
    depends_on:
      - 'backend-main'
    env_file: $BASE_PATH/apps/frontend/main/.env.staging

  caddy:
    image: $GITHUB_REGISTRY/nx-workspace-caddy:$IMAGE_TAG
    build:
      context: .
      dockerfile: $BASE_PATH/deployments/base-images/Dockerfile.caddy-runner
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
      - '2019:2019'
    volumes:
      - caddy_data:/data
      - caddy_config:/config

volumes:
  db_data:
